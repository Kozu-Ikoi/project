{"version":3,"sources":["data_fetchers/QuizFetcher.js","models/Quiz.js","actions/quizActionCreator.js","reducers/quizReducer.js","reducers/index.js","store/index.js","components/Button/Button.jsx","components/Home/Home.jsx","components/Quiz/Quiz.jsx","App.jsx","index.js"],"names":["QuizFetcher","axios","get","response","data","Quiz","question","correctAnswer","incorrectAnswers","this","_question","_correctAnswer","_incorrectAnswers","_","shuffle","answer","fetch","quizDataList","createQuizInstancesWithData","results","map","quizData","he","decode","correct_answer","incorrect_answers","str","fetchQuizzesRequest","type","fetchQuizzesSuccess","fetchQuizzesFailure","error","initialState","isLoading","quizzes","combineReducers","quizInfo","state","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","rootReducer","applyMiddleware","Button","props","onClickHandler","className","onClick","children","Home","history","push","currentIndex","numberOfCorrects","restart","setState","fetchQuizzes","quiz","judgeCorrectAnswer","alert","length","renderLoading","renderQuiz","renderResult","to","answers","shuffleAnswers","index","key","selectAnswer","id","React","Component","mapDispatchToProps","dispatch","a","QuizModel","connect","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c11df39.chunk.js","sourcesContent":["import axios from 'axios';//APIにアクセスするライブラリ、API実行のデータ管理\n\nconst API_URL = 'https://opentdb.com/api.php?amount=10&type=multiple';\n\nclass QuizFetcher{\n    static async fetch(){\n        const response = await axios.get(API_URL);//axios.getでAPI_URLを受け取る\n        return response.data;\n    }\n}\n\nexport default QuizFetcher;","import _ from 'lodash';//何のクイズを管理しているか、管理データをどのように操作するかのデータの管理\nimport he from 'he';\nimport QuizFetcher from '../data_fetchers/QuizFetcher';//データを読み込む用\n\nclass Quiz{\n    constructor({question, correctAnswer, incorrectAnswers}){//{}はオブジェクトを受け取るという意味{question}→questionプロパティを受け取る\n\n        this._question = question;\n        this._correctAnswer = correctAnswer;\n        this._incorrectAnswers = [...incorrectAnswers];//_は外からアクセスしてはならないプライベートな値として使われる\n    }\n\n    get question(){\n        return this._question;\n    }//getterキーワードを使って、_〇〇を外部へ返す\n\n    get correctAnswer(){\n        return this._correctAnswer;\n    }\n\n    shuffleAnswers(){\n        return _.shuffle([\n            this._correctAnswer,\n            ...this._incorrectAnswers\n        ]);\n    }// _.shuffleで引数に渡された配列がシャッフルされる、lodashライブラリをインストールしないとダメ、lodashを_に置き換えた\n\n    judgeCorrectAnswer(answer){//こっちはインスタンスメソッド\n        return answer === this._correctAnswer;\n    }\n\n    static async fetchAndCreateQuizzes(){//クラスメソッドの前にstaticが先頭に付く、クラス経由で実行するから特有の値は持たない（ひな形のみ）\n        const quizDataList = await QuizFetcher.fetch();//API取得データ\n\n       return Quiz.createQuizInstancesWithData(quizDataList.results);\n        /*\n        return quizDataList.results.map(result =>{//配列の生成\n            return{//heライブラリ→he.decodeによって特殊文字を読める文字にする\n                question: he.decode(result.question),\n                correctAnswer: he.decode(result.correct_answer),\n                incorrectAnswers: result.incorrect_answers.map(str => he.decode(str))\n            };\n        })\n        .map(quizData =>{//quizDataListが入ってくる\n            return new Quiz(quizData);\n        })\n        */\n    }\n\n    static createQuizInstancesWithData(quizDataList){//引数経由でクイズデータを受け取っている\n        return quizDataList.map(quizData => {\n            return{\n            question: he.decode(quizData.question),\n            correctAnswer: he.decode(quizData.correct_answer),\n            incorrectAnswers: quizData.incorrect_answers.map(str => he.decode(str))\n         };\n        })\n        .map(quizData => {//クイズインスタンスに格納する\n            return new Quiz(quizData);\n        })\n    }\n}\n\nexport default Quiz;","import axios from 'axios';//非同期処理を行う\nimport QuizModel from '../models/Quiz';\n\nconst API_URL = 'https://opentdb.com/api.php?amount=10&type=multiple';\n\nexport const FETCH_QUIZZES_REQUEST = 'FETCH_QUIZZES_REQUEST';\nexport const FETCH_QUIZZES_SUCCESS = 'FETCH_QUIZZES_SUCCESS';\nexport const FETCH_QUIZZES_FAILURE = 'FETCH_QUIZZES_FAILURE';\n\nexport const fetchQuizzes = ()=>{\n    return async (dispatch) => {\n        dispatch(fetchQuizzesRequest());\n        try{\n            const response = await axios.get(API_URL);//action内でデータを取得\n            const results = response.data.results;\n            const data = QuizModel.createQuizInstancesWithData(results);//QuizModelに渡してインスタンスを作る\n            dispatch(fetchQuizzesSuccess(data));\n        }catch(error){\n            dispatch(fetchQuizzesFailure(error));\n        }\n    };\n};\n\nconst fetchQuizzesRequest = ()=>{\n    return{\n        type: FETCH_QUIZZES_REQUEST\n    };\n};\n\nconst fetchQuizzesSuccess = (data)=>{\n    return{\n        type: FETCH_QUIZZES_SUCCESS,\n        data\n    };\n};\n\nconst fetchQuizzesFailure = (error)=>{\n    return{\n        type: FETCH_QUIZZES_FAILURE,\n        error\n    };\n};","import {\n    FETCH_QUIZZES_REQUEST,\n    FETCH_QUIZZES_SUCCESS,\n    FETCH_QUIZZES_FAILURE\n} from '../actions/quizActionCreator';\n\nconst initialState = {\n    isLoading: false,\n    quizzes: [],\n    error: null\n};\n\nexport const quizReducer = (state = initialState, action)=>{//引数にデフォルト値をセットする\n    switch(action.type){\n        case FETCH_QUIZZES_REQUEST:\n            return{\n                ...state,\n                isLoading: true\n            };\n        case FETCH_QUIZZES_SUCCESS:\n            return{\n                ...state,\n                isLoading: false,\n                quizzes: action.data,\n                error: null\n            };\n            case FETCH_QUIZZES_FAILURE:\n                return{\n                    ...state,\n                    isLoading: false,\n                    error: action.error\n                };\n            default:\n                return state;\n    }\n}","import { combineReducers }from 'redux';\nimport { quizReducer }from './quizReducer';\n\nexport default combineReducers({\n    quizInfo: quizReducer\n});//プロパティ名はquizInfoとした","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;//devツールのcrome-extentionが入っているかをチェック。もしなければcomposeをcomposeEnhancersにセット\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(//composeはmiddlewareと一緒に読み込む\n        applyMiddleware(...middleware)\n    )\n);\n\nexport default store;","import React from 'react';//ボタンの動作\nimport './Button.css';\n\nconst Button = (props) => {\n    let { onClickHandler } = props;//let onClickHandler = props.onClickHandler←Home.jsx/propsは外からデータを渡せる仕組み\n\n    //onClickHandlerに関数以外の値がセットされていたら、\n    //ボタンクリック時にエラーを出さないために何も中身のない\n    //関数を実行する\n\nif(typeof onClickHandler !== 'function'){\n    onClickHandler = () => {};\n}\n\nreturn (\n    <div\n    className=\"Button\"\n    onClick={onClickHandler}\n    >\n        {props.children}\n    </div>//props.childrenはButtonコンポーネントの開始タグと終了タグの全ての範囲(Restart)を指す\n);\n};\n\nexport default Button;\n","import React from 'react';//Reactのコンポーネント、ホームページとボタンの切り替え\nimport Button from '../Button/Button';\n\nconst Home = ({history})=>{//Route Componentsを使っている、\n    return(//{history}→props内のhistoryを使うと設定\n    <div>\n        <h1>ホーム</h1>\n        <Button onClickHandler = {()=>{\n            history.push('/quiz');\n        }}>\n            クイズページへ移動\n        </Button>\n    </div>\n    );\n};\n\nexport default Home;","import React from 'react';//Reactのコンポーネント（部品）、Quizページの動作\nimport { Link } from 'react-router-dom';// import {モジュール名} from 'ファイルパス'\nimport { connect } from 'react-redux';//quizコンポーネントと連携する\nimport Button from  '../Button/Button';\nimport { fetchQuizzes }from '../../actions/quizActionCreator';\nimport './Quiz.css';\n\nclass Quiz extends React.Component{//クラス→オブジェクト指向\n    constructor(props){\n        super(props);\n\n        this.state = {//stateのクイズではなく、reduxで管理しているquizReducerのquizzesを使うようにしたいので定義していない\n            currentIndex: 0,\n            numberOfCorrects: 0\n        };\n    }\n\n　　 componentDidMount(){//renderメソッド実行、DOMを更新後に実行する\n    　　 this.restart();\n    }\n\n　　 restart(){\n        this.setState({\n            currentIndex: 0,\n            numberOfCorrects: 0//情報のリセット\n        });\n        this.props.fetchQuizzes();//props経由でコンテナーから受け取った。このクイズの情報を活用していく\n    }\n\n    selectAnswer(quiz, answer){\n        let { currentIndex, numberOfCorrects } = this.state;\n        const isCorrect = quiz.judgeCorrectAnswer(answer);\n\n        if (isCorrect){\n            numberOfCorrects++;\n            alert('Correct answer!!');\n        }else{\n            alert(`Wrong answer... (The correct answer is \"${quiz.correctAnswer}\")`);\n        }\n        currentIndex++;\n\n        this.setState({\n            currentIndex,\n            numberOfCorrects\n        });\n    }\n\n    render(){\n        const { quizzes } = this.props.quizInfo;//props経由で受け取ったquizInfoを使う\n        const { currentIndex } = this.state;\n        \n        //読み込み中\n        if( quizzes.length === 0){\n            return this.renderLoading();\n        }\n\n        //クイズ中\n        if(quizzes.length > 0 && currentIndex < quizzes.length){\n            return this.renderQuiz();\n        }\n\n        //クイズ結果\n        if(quizzes.length > 0 && currentIndex >= quizzes.length){\n            return this.renderResult();\n        }\n    }\n\n    renderLoading(){//読み込み中のメソッド\n        return (\n            <div>\n                <h1>クイズページ</h1>\n                <p>Now loading...</p>\n                <hr/>\n              　<Link to=\"/\">トップページへ</Link>\n            </div>//toに移動先のURLをセット\n        );\n    }\n\n    renderQuiz(){//出題クイズを実装する\n        const {currentIndex } = this.state;\n        const { quizzes } = this.props.quizInfo;//props経由で受け取ったquizInfoを使う\n        const quiz = quizzes[currentIndex];\n        const answers = quiz.shuffleAnswers().map((answer, index) => {//シャッフルしたクイズを配列していく\n            return (//keyの値を入力しないと警告される\n                <li key={index}>\n                    <Button\n                      onClickHandler = {() => {this.selectAnswer(quiz, answer) }}//正解か不正解かを実行する\n                    >\n                        {answer}\n                    </Button>\n                </li>\n            );//thisは自分自身の参照→この場合、this===answers\n        });//map→新しい配列の生成\n\n        return (//クイズの回答一覧、quiz.questionは問題文\n            <div>\n                <h1>クイズページ</h1>\n                <div>\n                    <p>{quiz.question}</p>\n                    <ul className = \"QuizList\">{answers}</ul>\n                </div>\n                <hr/>\n                　<Link to=\"/\">トップページへ</Link>\n            </div>\n        );\n    }\n\n    renderResult(){\n        const { numberOfCorrects } = this.state;\n        const { quizzes } = this.props.quizInfo;//props経由で受け取ったquizInfoを使う\n\n        return (\n            <div>\n                <h1>クイズページ</h1>\n                <div>\n                    <p id=\"result\">{`${numberOfCorrects}/${quizzes.length}corrects.`}</p>\n                    <Button\n                      onClickHandler={() => {this.restart()}}\n                      >\n                    　Restart\n                    </Button>\n                </div>\n                <hr/>\n                <Link to=\"/\">トップページへ</Link>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        quizInfo: state.quizInfo,\n    };//quizInfoプロパティで返す\n};\n\nconst mapDispatchToProps = {//quizActionCreatorをimportしてきた\n    fetchQuizzes\n};\n\n/*\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        fetchQuizzes: ()=>{\n            dispatch( fetchQuizzes());\n        }\n    }\n}\n\n*/\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Quiz);","import React from 'react';//Reactのコンポーネント、jsx≒html、Reactはjsにhtml要素を追加したもの。\nimport {\n  HashRouter as Router,\n  Route\n}from 'react-router-dom';//HashRouterによって\"#\"をつけている（常に同じページという意味）\nimport Home from './components/Home/Home';\nimport Quiz from './components/Quiz/Quiz';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className = \"App\">\n    <Router>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/quiz\" exact component={Quiz} />\n    </Router>\n    </div>//HomeコンポーネントとQuizコンポーネントに継承する\n  );//exactはurl『完全一致』のページのみを開くようにする、pathにはurl、componentには表示するコンポーネントをセット\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider }from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={store}>\n       <App />\n    </Provider>, \ndocument.getElementById('root'));\n\n\n"],"sourceRoot":""}